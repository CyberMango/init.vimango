############################################################################
# File structure snippets
############################################################################

snippet hw "Create a simple c program"
#include <stdio.h>

int main(void)
{
    (void)printf("Hello, World!\n");
    $0
    return 0;
}

endsnippet

snippet cfile "Structure of a module's c file with an internal header."
/*
Creator : `whoami`
Created : `date +%d/%m/%y`
Purpose : ${1:TODO add purpose}
*/

/*** Headers ***/
#include <`!p snip.rv = snip.basename`_internal.h>

/*** Functions ***/
$0

endsnippet

snippet ifile "Structure of a module's internal h file."
/*
Creator : `whoami`
Created : `date +%d/%m/%y`
Purpose : Internal header for the `!p snip.rv = snip.basename[:-len("_internal")]` module.
*/
`!p file_name_upper = snip.basename.upper()`
#ifndef __`!p snip.rv = file_name_upper`_H__
#define __`!p snip.rv = file_name_upper`_H__

/*** Headers ***/
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include "common.h"
#include "${1:project}_status.h"

/*** Constants ***/

/*** Macros ***/

/*** Functions ***/
$0

#endif /* __`!p snip.rv = file_name_upper`_H__ */

endsnippet

snippet hfile "Structure of an external header file of a module."
/*
Creator : `whoami`
Created : `date +%d/%m/%y`
Purpose : ${1:TODO add purpose}
*/
`!p file_name_upper = snip.basename.upper()`
#ifndef __`!p snip.rv = file_name_upper`_H__
#define __`!p snip.rv = file_name_upper`_H__

/*** Headers ***/
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include "common.h"
#include "${2:project}_status.h"

/*** Constants ***/

/*** Macros ***/

/*** Functions ***/
$0

#endif /* __`!p snip.rv = file_name_upper`_H__ */

endsnippet

snippet sfile "A status file for the project"
/*`!p project_name = snip.basename[:-len("_status")]`
Creator : `whoami`
Created : `date +%d/%m/%y`
Purpose : Return statuses for the `!p snip.rv = project_name` project.
*/
`!p project_name_upper = project_name.upper()`
#ifndef __`!p snip.rv = project_name_upper`_STATUS_H__
#define __`!p snip.rv = project_name_upper`_STATUS_H__

/*** Enums ***/
enum `!p snip.rv = project_name`_status
{
    `!p snip.rv = project_name_upper`_STATUS_UNINITIALIZED = -1,
    `!p snip.rv = project_name_upper`_STATUS_SUCCESS = 0,

    `!p snip.rv = project_name_upper`_STATUS_${0:TODO},
};

#endif /* __`!p snip.rv = project_name_upper`_STATUS_H__ */

endsnippet
snippet mfile "A main file of the project."
/*
Creator : `whoami`
Created : `date+%d/%m/%y`
Purpose : ${1:TODO add purpose}
*/

/*** Headers ***/
#include <stdio.h>

#include "common.h"
#include "$2_status.h"

/*** Constants ***/

/*** Functions ***/
/*
Purpose      : ${4:TODO add a purpose.}`!p if t[3]=="" or t[3]=="void":
    snip.rv = ""
else:
    snip.rv = "\nParameters   : TODO doc parameters"`
Return Value : enum $2_status
Notes        : ${5:None}
*/
int main(${3:int argc, char *argv[]})
{
    enum $2_status status = `!p snip.rv=t[2].upper()`_STATUS_SUCCESS;

    $0

l_cleanup:
    return (int)status;
}

endsnippet

############################################################################
# Function creation snippets
############################################################################

global !p
def get_var_names(given_vars):
    alpha_like = ['_']
    first_non_alnum = 0
    vars = given_vars.split(",")
    vars = [var.split(" ")[-1] for var in vars]

    for var_index,var in enumerate(vars):
        for letter_index,letter in enumerate(var):
            if ((letter.isalpha()) or (letter in alpha_like)):
                vars[var_index] = var[letter_index:]
                break

    for var_index,var in enumerate(vars):
        for letter_index,letter in enumerate(var):
            if ((not letter.isalnum()) and (letter not in alpha_like)):
                first_non_alnum = letter_index
                break

        if first_non_alnum != 0:
            vars[var_index] = var[:first_non_alnum]
        first_non_alnum = 0

    return vars
endglobal

global !p
def get_params_doc_lines(params):
    if snip.tabstops[5].current_text in ["", "void"]:
        return

    lines = "${}\nParameters   : ".format(snip.tabstop)
    line_format = "{}{} - ${}\n"
    for index,param in enumerate(params):
        if index == 0:
            lines += line_format.format("", param, index + snip.tabstop + 1)
        else:
            lines += line_format.format(" " * 15, param, index + snip.tabstop + 1)

    # Remove last dynamic tabstop because the static tabstop is reached at the end
    lines = lines[:lines.rfind("$")]

    snip.expand_anon(lines)
endglobal

post_jump "if snip.tabstop == 6: get_params_doc_lines(get_var_names(snip.tabstops[5].current_text))"
snippet fdec "A declaration of a function"
/*
Purpose      : $6
Return Value : $1
Notes        : ${8:None}
*/
${1:enum ${2:project}_status} ${3:$2}_${4:funcname}($5);
`!p if (t[3] != t[2]) and (t[2] != ""):
    t[3] = t[2].upper()`
endsnippet

############################################################################
# In-function snippets
############################################################################

snippet scheck "Status return validation"
if ($1_STATUS_SUCCESS != status)
{
    DEBUG_PRINT("$2 status->%uz\n", $3, status);
    goto l_cleanup;
}
endsnippet


############################################################################
# Trial snippets to delete
############################################################################

global !p
global_var = 15
endglobal

snippet trial1
`!p global global_var
global_var = 3
snip.rv = global_var`
${1:`!p snip.rv=global_var`}
endsnippet

snippet trial2
`!p snip.rv = global_var`
endsnippet
